name: Publish NuGet Packages

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    name: Build and Publish Changed NuGet Packages

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1
        with:
          versionSpec: '5.x'

      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1
        with:
          useConfigFile: true

      - name: Output GitVersion Information
        run: |
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "NuGet Version: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"

      - name: Detect Changed and Dependent Projects
        id: changes
        run: |
          echo "Fetching changed projects..."
          git fetch origin main
          CHANGED=$(git diff --name-only origin/main...HEAD | grep '\.csproj$' || true)

          echo "Changed project files:"
          echo "$CHANGED"

          ALL_PROJECTS=$(find . -name '*.csproj')
          echo "" > impacted_projects.txt

          for proj in $CHANGED; do
            echo "$proj" >> impacted_projects.txt

            echo "Checking for transitive dependents of $proj..."
            for candidate in $ALL_PROJECTS; do
              if grep -q "$proj" "$candidate"; then
                echo "$candidate depends on $proj"
                echo "$candidate" >> impacted_projects.txt
              fi
            done
          done

          echo "Unique impacted projects:"
          sort impacted_projects.txt | uniq > filtered_projects.txt
          cat filtered_projects.txt

          echo "changed_projects<<EOF" >> $GITHUB_OUTPUT
          cat filtered_projects.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Restore dependencies
        run: dotnet restore EventBankingCo.Core.sln

      - name: Build solution
        run: dotnet build EventBankingCo.Core.sln --configuration Release --no-restore

      - name: Pack Changed Projects
        run: |
          mkdir -p ./nupkgs
          PACKED=()
          SKIPPED=()

          while IFS= read -r proj; do
            if [ -f "$proj" ]; then
              echo "Packing $proj"
              dotnet pack "$proj" \
                --configuration Release \
                --no-build \
                --output ./nupkgs \
                /p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersionV2 }}
              PACKED+=("$proj")
            else
              SKIPPED+=("$proj")
            fi
          done < filtered_projects.txt

          echo ""
          echo "✅ Packed Projects:"
          for p in "${PACKED[@]}"; do echo "  - $p"; done

          echo ""
          echo "⏭️ Skipped Projects (Not found):"
          for s in "${SKIPPED[@]}"; do echo "  - $s"; done

      - name: Push packages to NuGet
        if: success()
        run: |
          if compgen -G "./nupkgs/*.nupkg" > /dev/null; then
            dotnet nuget push "./nupkgs/*.nupkg" \
              --source https://api.nuget.org/v3/index.json \
              --api-key ${{ secrets.NUGET_API_KEY }} \
              --skip-duplicate
          else
            echo "📦 No packages to push."
