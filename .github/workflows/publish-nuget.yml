name: Publish NuGet Packages

on:
  push:
    branches:
      - main

jobs:
  publish:
    name: Build and Publish Core NuGet Packages
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1
        with:
          versionSpec: '5.x'

      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1
        with:
          useConfigFile: true

      - name: Restore dependencies
        run: dotnet restore EventBankingCo.Core.sln

      - name: Build solution
        run: dotnet build EventBankingCo.Core.sln --configuration Release --no-restore

      - name: Determine changed projects and pack (with transitive detection)
        id: pack-projects
        shell: bash
        run: |
          set -e
          git fetch origin main

          mkdir -p ./nupkgs

          declare -A PROJECT_PATHS
          declare -A PROJECT_PACKED
          declare -A PROJECT_DEPENDENCIES

          # Define your projects
          PROJECT_PATHS["Domain"]="EventBankingCo.Core.Domain/EventBankingCo.Core.Domain.csproj"
          PROJECT_PATHS["Logging"]="EventBankingCo.Core.Logging/EventBankingCo.Core.Logging.csproj"
          PROJECT_PATHS["DataAccess"]="EventBankingCo.Core.DataAccess/EventBankingCo.Core.DataAccess.csproj"
          PROJECT_PATHS["RequestHandling"]="EventBankingCo.Core.RequestHandling/EventBankingCo.Core.RequestHandling.csproj"
          PROJECT_PATHS["ApiShared"]="EventBankingCo.Core.ApiShared/EventBankingCo.Core.ApiShared.csproj"
          PROJECT_PATHS["KafkaProducer"]="EventBankingCo.Core.KafkaProducer/EventBankingCo.Core.KafkaProducer.csproj"

          # Read direct dependencies from .csproj files
          for name in "${!PROJECT_PATHS[@]}"; do
            path="${PROJECT_PATHS[$name]}"
            deps=$(grep '<ProjectReference Include=' "$path" | sed -E 's/.*Include="([^"]+)".*/\1/' | xargs -n1 basename | sed 's/.csproj//')
            PROJECT_DEPENDENCIES[$name]="$deps"
          done

          # Recursively detect if a project or any of its dependencies changed
          has_changes() {
            local project="$1"
            local path="${PROJECT_PATHS[$project]}"
            local folder="$(dirname "$path")"

            if git diff --quiet origin/main...HEAD -- "$folder"; then
              for dep in ${PROJECT_DEPENDENCIES[$project]}; do
                if [[ -n "${PROJECT_PATHS[$dep]}" ]] && has_changes "$dep"; then
                  return 0
                fi
              done
              return 1
            else
              return 0
            fi
          }

          ANY_PACKED=0

          for name in "${!PROJECT_PATHS[@]}"; do
            if has_changes "$name"; then
              echo "ðŸ“¦ Packing $name (changed or transitive dependency changed)"
              dotnet pack "${PROJECT_PATHS[$name]}" \
                --configuration Release \
                --no-build \
                --output ./nupkgs \
                /p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersionV2 }}
              PROJECT_PACKED["$name"]=1
              ANY_PACKED=1
            else
              echo "âœ… Skipping $name (no direct or transitive changes)"
            fi
          done

          echo "PACKED=$ANY_PACKED" >> "$GITHUB_OUTPUT"

      - name: Push packages to NuGet
        if: steps.pack-projects.outputs.PACKED == '1'
        run: |
          echo "ðŸ“¤ Pushing packages to NuGet..."
          dotnet nuget push "./nupkgs/*.nupkg" \
            --source https://api.nuget.org/v3/index.json \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --skip-duplicate

      - name: Skip NuGet Push
        if: steps.pack-projects.outputs.PACKED != '1'
        run: echo "ðŸ›‘ No projects were packed. Skipping NuGet push."
